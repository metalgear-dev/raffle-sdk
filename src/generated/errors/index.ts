/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * NoTicketsAvailable: 'No tickets available'
 *
 * @category Errors
 * @category generated
 */
export class NoTicketsAvailableError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'NoTicketsAvailable'
  constructor() {
    super('No tickets available')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoTicketsAvailableError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new NoTicketsAvailableError())
createErrorFromNameLookup.set(
  'NoTicketsAvailable',
  () => new NoTicketsAvailableError()
)

/**
 * BidderSizeInvalid: 'Bids size does not match'
 *
 * @category Errors
 * @category generated
 */
export class BidderSizeInvalidError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'BidderSizeInvalid'
  constructor() {
    super('Bids size does not match')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BidderSizeInvalidError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new BidderSizeInvalidError())
createErrorFromNameLookup.set(
  'BidderSizeInvalid',
  () => new BidderSizeInvalidError()
)

/**
 * RaffleEnded: 'Raffle has already ended'
 *
 * @category Errors
 * @category generated
 */
export class RaffleEndedError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'RaffleEnded'
  constructor() {
    super('Raffle has already ended')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RaffleEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new RaffleEndedError())
createErrorFromNameLookup.set('RaffleEnded', () => new RaffleEndedError())

/**
 * CalculationOverflow: 'Overflow'
 *
 * @category Errors
 * @category generated
 */
export class CalculationOverflowError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'CalculationOverflow'
  constructor() {
    super('Overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CalculationOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new CalculationOverflowError())
createErrorFromNameLookup.set(
  'CalculationOverflow',
  () => new CalculationOverflowError()
)

/**
 * RaffleRunning: 'Raffle has not ended yet'
 *
 * @category Errors
 * @category generated
 */
export class RaffleRunningError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'RaffleRunning'
  constructor() {
    super('Raffle has not ended yet')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RaffleRunningError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new RaffleRunningError())
createErrorFromNameLookup.set('RaffleRunning', () => new RaffleRunningError())

/**
 * RaffleWinnerNotFound: 'Raffle winner has not been decided yet'
 *
 * @category Errors
 * @category generated
 */
export class RaffleWinnerNotFoundError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'RaffleWinnerNotFound'
  constructor() {
    super('Raffle winner has not been decided yet')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RaffleWinnerNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new RaffleWinnerNotFoundError())
createErrorFromNameLookup.set(
  'RaffleWinnerNotFound',
  () => new RaffleWinnerNotFoundError()
)

/**
 * InvalidAccountDiscriminant: 'Account discriminant is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountDiscriminantError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidAccountDiscriminant'
  constructor() {
    super('Account discriminant is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAccountDiscriminantError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1776,
  () => new InvalidAccountDiscriminantError()
)
createErrorFromNameLookup.set(
  'InvalidAccountDiscriminant',
  () => new InvalidAccountDiscriminantError()
)

/**
 * WinnerAlreadySet: 'Winner has already been set'
 *
 * @category Errors
 * @category generated
 */
export class WinnerAlreadySetError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'WinnerAlreadySet'
  constructor() {
    super('Winner has already been set')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WinnerAlreadySetError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new WinnerAlreadySetError())
createErrorFromNameLookup.set(
  'WinnerAlreadySet',
  () => new WinnerAlreadySetError()
)

/**
 * InvalidRemainingAccount: 'Remaining account is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRemainingAccountError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidRemainingAccount'
  constructor() {
    super('Remaining account is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRemainingAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidRemainingAccountError())
createErrorFromNameLookup.set(
  'InvalidRemainingAccount',
  () => new InvalidRemainingAccountError()
)

/**
 * InvalidFreezeAuthority: 'Invalid freeze authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFreezeAuthorityError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'InvalidFreezeAuthority'
  constructor() {
    super('Invalid freeze authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFreezeAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new InvalidFreezeAuthorityError())
createErrorFromNameLookup.set(
  'InvalidFreezeAuthority',
  () => new InvalidFreezeAuthorityError()
)

/**
 * InvalidClaimer: 'Claimer is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidClaimerError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidClaimer'
  constructor() {
    super('Claimer is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidClaimerError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidClaimerError())
createErrorFromNameLookup.set('InvalidClaimer', () => new InvalidClaimerError())

/**
 * RaffleNotClaimed: 'Raffle has not been claimed yet'
 *
 * @category Errors
 * @category generated
 */
export class RaffleNotClaimedError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'RaffleNotClaimed'
  constructor() {
    super('Raffle has not been claimed yet')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RaffleNotClaimedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new RaffleNotClaimedError())
createErrorFromNameLookup.set(
  'RaffleNotClaimed',
  () => new RaffleNotClaimedError()
)

/**
 * RaffleAlreadyClaimed: 'Raffle has been claimed'
 *
 * @category Errors
 * @category generated
 */
export class RaffleAlreadyClaimedError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'RaffleAlreadyClaimed'
  constructor() {
    super('Raffle has been claimed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RaffleAlreadyClaimedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new RaffleAlreadyClaimedError())
createErrorFromNameLookup.set(
  'RaffleAlreadyClaimed',
  () => new RaffleAlreadyClaimedError()
)

/**
 * RaffleNotFinished: 'Raffle has not been finished yet'
 *
 * @category Errors
 * @category generated
 */
export class RaffleNotFinishedError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'RaffleNotFinished'
  constructor() {
    super('Raffle has not been finished yet')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RaffleNotFinishedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new RaffleNotFinishedError())
createErrorFromNameLookup.set(
  'RaffleNotFinished',
  () => new RaffleNotFinishedError()
)

/**
 * RaffleAlreadyFinished: 'Raffle has already been finished'
 *
 * @category Errors
 * @category generated
 */
export class RaffleAlreadyFinishedError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'RaffleAlreadyFinished'
  constructor() {
    super('Raffle has already been finished')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RaffleAlreadyFinishedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new RaffleAlreadyFinishedError())
createErrorFromNameLookup.set(
  'RaffleAlreadyFinished',
  () => new RaffleAlreadyFinishedError()
)

/**
 * ImpossibleToClose: 'Raffle can not be closed'
 *
 * @category Errors
 * @category generated
 */
export class ImpossibleToCloseError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'ImpossibleToClose'
  constructor() {
    super('Raffle can not be closed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ImpossibleToCloseError)
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new ImpossibleToCloseError())
createErrorFromNameLookup.set(
  'ImpossibleToClose',
  () => new ImpossibleToCloseError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
