/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CloseRaffle
 * @category generated
 */
export const closeRaffleStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'CloseRaffleInstructionArgs'
)
/**
 * Accounts required by the _closeRaffle_ instruction
 *
 * @property [_writable_, **signer**] creator
 * @property [_writable_] raffle
 * @property [] escrow
 * @property [_writable_] rafflePayAccount
 * @property [_writable_] rafflePrizeAccount
 * @property [_writable_] bids
 * @category Instructions
 * @category CloseRaffle
 * @category generated
 */
export type CloseRaffleInstructionAccounts = {
  creator: web3.PublicKey
  raffle: web3.PublicKey
  escrow: web3.PublicKey
  rafflePayAccount: web3.PublicKey
  rafflePrizeAccount: web3.PublicKey
  bids: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const closeRaffleInstructionDiscriminator = [
  220, 129, 128, 51, 70, 66, 209, 124,
]

/**
 * Creates a _CloseRaffle_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CloseRaffle
 * @category generated
 */
export function createCloseRaffleInstruction(
  accounts: CloseRaffleInstructionAccounts,
  programId = new web3.PublicKey('HhxUeshYUCryZj9qAt43Xy5ws4CM7TMuKr9sSHdAfJtp')
) {
  const [data] = closeRaffleStruct.serialize({
    instructionDiscriminator: closeRaffleInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.creator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.raffle,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.escrow,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rafflePayAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rafflePrizeAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.bids,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
