/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Collect
 * @category generated
 */
export const collectStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'CollectInstructionArgs'
)
/**
 * Accounts required by the _collect_ instruction
 *
 * @property [_writable_] raffle
 * @property [_writable_, **signer**] creator
 * @property [] escrow
 * @property [_writable_] rafflePayAccount
 * @property [_writable_] creatorPayAccount
 * @category Instructions
 * @category Collect
 * @category generated
 */
export type CollectInstructionAccounts = {
  raffle: web3.PublicKey
  creator: web3.PublicKey
  escrow: web3.PublicKey
  rafflePayAccount: web3.PublicKey
  creatorPayAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const collectInstructionDiscriminator = [
  208, 47, 194, 155, 17, 98, 82, 236,
]

/**
 * Creates a _Collect_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Collect
 * @category generated
 */
export function createCollectInstruction(
  accounts: CollectInstructionAccounts,
  programId = new web3.PublicKey('HhxUeshYUCryZj9qAt43Xy5ws4CM7TMuKr9sSHdAfJtp')
) {
  const [data] = collectStruct.serialize({
    instructionDiscriminator: collectInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.raffle,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.creator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.escrow,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rafflePayAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.creatorPayAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
